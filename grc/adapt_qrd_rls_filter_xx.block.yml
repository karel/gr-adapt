id: adapt_qrd_rls_filter_xx
label: QRD-RLS Filter
category: '[Adaptive Filters]/'

parameters:
-   id: type
    label: Type
    dtype: enum
    options: [cc, ff]
    option_labels: [Complex, Float]
    option_attributes:
        input: [complex, float]
        output: [complex, float]
    hide: part
-   id: num_taps
    label: Num. Taps
    dtype: int
    #hide: ${ 'part' if vlen == 1 else 'none' }
-   id: delta
    label: "\u03B4"
    dtype: float
-   id: lambda
    label: "\u03BB"
    dtype: float
-   id: skip
    label: Skip
    dtype: int
    default: '0'
-   id: decimation
    label: Decimation
    dtype: int
    default: '1'
-   id: adapt
    label: Adapt
    dtype: bool
    default: 'True'
-   id: reset
    label: Reset
    dtype: bool
    default: 'False'

inputs:
-   label: reference
    domain: stream
    dtype: ${ type.input }
    multiplicity: '1'
-   label: input
    domain: stream
    dtype: ${ type.input }
    multiplicity: '1'

outputs:
-   label: output
    domain: stream
    dtype: ${ type.output }
    multiplicity: '1'
-   label: error
    domain: stream
    dtype: ${ type.output }
    multiplicity: '1'
    optional: true
-   label: taps
    domain: stream
    dtype: ${ type.output }
    vlen: ${ num_taps }
    multiplicity: '1'
    optional: true
asserts:
- ${ num_taps > 0 }
- ${ delta > 0 and delta <= 300 }
- ${ lambda > 0 and lambda <= 1 }
- ${ skip >= 0 }
- ${ decimation > 0 }

templates:
    imports: import adapt
    make: adapt.qrd_rls_filter_${type}(${num_taps}, ${delta}, ${lambda}, ${skip},
        ${decimation}, ${adapt}, ${reset})
    callbacks:
    - set_delta(${delta})
    - set_lambda(${lambda})
    - set_skip(${skip})
    - set_adapt(${adapt})
    - set_reset(${reset})

file_format: 1
