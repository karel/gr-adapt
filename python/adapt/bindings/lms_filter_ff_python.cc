/*
 * Copyright 2025 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(1)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(lms_filter_ff.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(f92e68fa89bc804a0740e7216e716aa1)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/adapt/lms_filter_ff.h>
// pydoc.h is automatically generated in the build directory
#include <lms_filter_ff_pydoc.h>

void bind_lms_filter_ff(py::module& m)
{

    using lms_filter_ff = ::gr::adapt::lms_filter_ff;


    py::class_<lms_filter_ff, gr::sync_decimator, std::shared_ptr<lms_filter_ff>>(
        m, "lms_filter_ff", D(lms_filter_ff))

        .def(py::init(&lms_filter_ff::make),
             py::arg("first_input"),
             py::arg("num_taps"),
             py::arg("mu"),
             py::arg("skip"),
             py::arg("decimation"),
             py::arg("adapt"),
             py::arg("bypass"),
             py::arg("reset"),
             D(lms_filter_ff, make))


        .def("set_taps",
             &lms_filter_ff::set_taps,
             py::arg("taps"),
             D(lms_filter_ff, set_taps))


        .def("get_taps", &lms_filter_ff::get_taps, D(lms_filter_ff, get_taps))


        .def("get_mu", &lms_filter_ff::get_mu, D(lms_filter_ff, get_mu))


        .def("set_mu", &lms_filter_ff::set_mu, py::arg("mu"), D(lms_filter_ff, set_mu))


        .def("get_skip", &lms_filter_ff::get_skip, D(lms_filter_ff, get_skip))


        .def("set_skip",
             &lms_filter_ff::set_skip,
             py::arg("skip"),
             D(lms_filter_ff, set_skip))


        .def("get_adapt", &lms_filter_ff::get_adapt, D(lms_filter_ff, get_adapt))


        .def("set_adapt",
             &lms_filter_ff::set_adapt,
             py::arg("adapt"),
             D(lms_filter_ff, set_adapt))


        .def("get_bypass", &lms_filter_ff::get_bypass, D(lms_filter_ff, get_bypass))


        .def("set_bypass",
             &lms_filter_ff::set_bypass,
             py::arg("bypass"),
             D(lms_filter_ff, set_bypass))


        .def("get_reset", &lms_filter_ff::get_reset, D(lms_filter_ff, get_reset))


        .def("set_reset",
             &lms_filter_ff::set_reset,
             py::arg("reset"),
             D(lms_filter_ff, set_reset))

        ;
}
