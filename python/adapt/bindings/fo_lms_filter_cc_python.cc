/*
 * Copyright 2023 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(1)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(fo_lms_filter_cc.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(83184c60ce6ed0b9325391ce20d3e0d4)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/adapt/fo_lms_filter_cc.h>
// pydoc.h is automatically generated in the build directory
#include <fo_lms_filter_cc_pydoc.h>

void bind_fo_lms_filter_cc(py::module& m)
{

    using fo_lms_filter_cc = ::gr::adapt::fo_lms_filter_cc;


    py::class_<fo_lms_filter_cc,
               gr::block,
               gr::basic_block,
               std::shared_ptr<fo_lms_filter_cc>>(
        m, "fo_lms_filter_cc", D(fo_lms_filter_cc))

        .def(py::init(&fo_lms_filter_cc::make),
             py::arg("samp_rate"),
             py::arg("num_taps"),
             py::arg("mu_cir"),
             py::arg("mu_cfo"),
             py::arg("mu_sfo"),
             py::arg("adapt"),
             py::arg("reset"),
             D(fo_lms_filter_cc, make))


        .def("get_mu_cir", &fo_lms_filter_cc::get_mu_cir, D(fo_lms_filter_cc, get_mu_cir))


        .def("set_mu_cir",
             &fo_lms_filter_cc::set_mu_cir,
             py::arg("mu_cir"),
             D(fo_lms_filter_cc, set_mu_cir))


        .def("get_mu_cfo", &fo_lms_filter_cc::get_mu_cfo, D(fo_lms_filter_cc, get_mu_cfo))


        .def("set_mu_cfo",
             &fo_lms_filter_cc::set_mu_cfo,
             py::arg("mu_cfo"),
             D(fo_lms_filter_cc, set_mu_cfo))


        .def("get_mu_sfo", &fo_lms_filter_cc::get_mu_sfo, D(fo_lms_filter_cc, get_mu_sfo))


        .def("set_mu_sfo",
             &fo_lms_filter_cc::set_mu_sfo,
             py::arg("mu_sfo"),
             D(fo_lms_filter_cc, set_mu_sfo))


        .def("get_adapt", &fo_lms_filter_cc::get_adapt, D(fo_lms_filter_cc, get_adapt))


        .def("set_adapt",
             &fo_lms_filter_cc::set_adapt,
             py::arg("adapt"),
             D(fo_lms_filter_cc, set_adapt))


        .def("get_reset", &fo_lms_filter_cc::get_reset, D(fo_lms_filter_cc, get_reset))


        .def("set_reset",
             &fo_lms_filter_cc::set_reset,
             py::arg("reset"),
             D(fo_lms_filter_cc, set_reset))

        ;
}
